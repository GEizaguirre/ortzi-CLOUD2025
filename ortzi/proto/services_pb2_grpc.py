# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import ortzi.proto.services_pb2 as services__pb2

GRPC_GENERATED_VERSION = '1.64.1'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.65.0'
SCHEDULED_RELEASE_DATE = 'June 25, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in services_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class SchedulerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendTasks = channel.unary_unary(
                '/Scheduler/SendTasks',
                request_serializer=services__pb2.NumberOfTasks.SerializeToString,
                response_deserializer=services__pb2.ListTaskInformation.FromString,
                _registered_method=True)
        self.TaskCompleted = channel.unary_unary(
                '/Scheduler/TaskCompleted',
                request_serializer=services__pb2.TaskCompletedInfo.SerializeToString,
                response_deserializer=services__pb2.EmptyResponse.FromString,
                _registered_method=True)
        self.ServerRegisterRequestedPartition = channel.unary_unary(
                '/Scheduler/ServerRegisterRequestedPartition',
                request_serializer=services__pb2.RequestPartition.SerializeToString,
                response_deserializer=services__pb2.EmptyResponse.FromString,
                _registered_method=True)
        self.RegisterExecutorAddress = channel.unary_unary(
                '/Scheduler/RegisterExecutorAddress',
                request_serializer=services__pb2.ExecutorAddress.SerializeToString,
                response_deserializer=services__pb2.BooleanResponse.FromString,
                _registered_method=True)
        self.ConsultEvents = channel.unary_stream(
                '/Scheduler/ConsultEvents',
                request_serializer=services__pb2.ExecutorInformation.SerializeToString,
                response_deserializer=services__pb2.EventWriteOrRead.FromString,
                _registered_method=True)
        self.PartitionSavedExternal = channel.unary_unary(
                '/Scheduler/PartitionSavedExternal',
                request_serializer=services__pb2.PartitionKey.SerializeToString,
                response_deserializer=services__pb2.EmptyResponse.FromString,
                _registered_method=True)
        self.UpdateFanout = channel.unary_unary(
                '/Scheduler/UpdateFanout',
                request_serializer=services__pb2.Fanout.SerializeToString,
                response_deserializer=services__pb2.EmptyResponse.FromString,
                _registered_method=True)
        self.Ping = channel.unary_unary(
                '/Scheduler/Ping',
                request_serializer=services__pb2.PingRequest.SerializeToString,
                response_deserializer=services__pb2.PingResponse.FromString,
                _registered_method=True)


class SchedulerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SendTasks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TaskCompleted(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ServerRegisterRequestedPartition(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterExecutorAddress(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConsultEvents(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PartitionSavedExternal(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateFanout(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Ping(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SchedulerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendTasks': grpc.unary_unary_rpc_method_handler(
                    servicer.SendTasks,
                    request_deserializer=services__pb2.NumberOfTasks.FromString,
                    response_serializer=services__pb2.ListTaskInformation.SerializeToString,
            ),
            'TaskCompleted': grpc.unary_unary_rpc_method_handler(
                    servicer.TaskCompleted,
                    request_deserializer=services__pb2.TaskCompletedInfo.FromString,
                    response_serializer=services__pb2.EmptyResponse.SerializeToString,
            ),
            'ServerRegisterRequestedPartition': grpc.unary_unary_rpc_method_handler(
                    servicer.ServerRegisterRequestedPartition,
                    request_deserializer=services__pb2.RequestPartition.FromString,
                    response_serializer=services__pb2.EmptyResponse.SerializeToString,
            ),
            'RegisterExecutorAddress': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterExecutorAddress,
                    request_deserializer=services__pb2.ExecutorAddress.FromString,
                    response_serializer=services__pb2.BooleanResponse.SerializeToString,
            ),
            'ConsultEvents': grpc.unary_stream_rpc_method_handler(
                    servicer.ConsultEvents,
                    request_deserializer=services__pb2.ExecutorInformation.FromString,
                    response_serializer=services__pb2.EventWriteOrRead.SerializeToString,
            ),
            'PartitionSavedExternal': grpc.unary_unary_rpc_method_handler(
                    servicer.PartitionSavedExternal,
                    request_deserializer=services__pb2.PartitionKey.FromString,
                    response_serializer=services__pb2.EmptyResponse.SerializeToString,
            ),
            'UpdateFanout': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateFanout,
                    request_deserializer=services__pb2.Fanout.FromString,
                    response_serializer=services__pb2.EmptyResponse.SerializeToString,
            ),
            'Ping': grpc.unary_unary_rpc_method_handler(
                    servicer.Ping,
                    request_deserializer=services__pb2.PingRequest.FromString,
                    response_serializer=services__pb2.PingResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Scheduler', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('Scheduler', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Scheduler(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SendTasks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Scheduler/SendTasks',
            services__pb2.NumberOfTasks.SerializeToString,
            services__pb2.ListTaskInformation.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TaskCompleted(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Scheduler/TaskCompleted',
            services__pb2.TaskCompletedInfo.SerializeToString,
            services__pb2.EmptyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ServerRegisterRequestedPartition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Scheduler/ServerRegisterRequestedPartition',
            services__pb2.RequestPartition.SerializeToString,
            services__pb2.EmptyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RegisterExecutorAddress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Scheduler/RegisterExecutorAddress',
            services__pb2.ExecutorAddress.SerializeToString,
            services__pb2.BooleanResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ConsultEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/Scheduler/ConsultEvents',
            services__pb2.ExecutorInformation.SerializeToString,
            services__pb2.EventWriteOrRead.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PartitionSavedExternal(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Scheduler/PartitionSavedExternal',
            services__pb2.PartitionKey.SerializeToString,
            services__pb2.EmptyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateFanout(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Scheduler/UpdateFanout',
            services__pb2.Fanout.SerializeToString,
            services__pb2.EmptyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Scheduler/Ping',
            services__pb2.PingRequest.SerializeToString,
            services__pb2.PingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class ExecutorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SavePartitionInCloud = channel.unary_unary(
                '/Executor/SavePartitionInCloud',
                request_serializer=services__pb2.SavePartitionInfo.SerializeToString,
                response_deserializer=services__pb2.SaveCloudRequestDone.FromString,
                _registered_method=True)
        self.ReadPartitionFromCloud = channel.unary_unary(
                '/Executor/ReadPartitionFromCloud',
                request_serializer=services__pb2.PartitionSavedInformation.SerializeToString,
                response_deserializer=services__pb2.EmptyResponse.FromString,
                _registered_method=True)
        self.FinishExecutor = channel.unary_unary(
                '/Executor/FinishExecutor',
                request_serializer=services__pb2.EmptyResponse.SerializeToString,
                response_deserializer=services__pb2.EmptyResponse.FromString,
                _registered_method=True)
        self.UpdatePartitionExecutor = channel.unary_unary(
                '/Executor/UpdatePartitionExecutor',
                request_serializer=services__pb2.EventUpdatePartitionStage.SerializeToString,
                response_deserializer=services__pb2.EmptyResponse.FromString,
                _registered_method=True)
        self.Ping = channel.unary_unary(
                '/Executor/Ping',
                request_serializer=services__pb2.EmptyResponse.SerializeToString,
                response_deserializer=services__pb2.EmptyResponse.FromString,
                _registered_method=True)


class ExecutorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SavePartitionInCloud(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadPartitionFromCloud(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FinishExecutor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdatePartitionExecutor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Ping(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ExecutorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SavePartitionInCloud': grpc.unary_unary_rpc_method_handler(
                    servicer.SavePartitionInCloud,
                    request_deserializer=services__pb2.SavePartitionInfo.FromString,
                    response_serializer=services__pb2.SaveCloudRequestDone.SerializeToString,
            ),
            'ReadPartitionFromCloud': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadPartitionFromCloud,
                    request_deserializer=services__pb2.PartitionSavedInformation.FromString,
                    response_serializer=services__pb2.EmptyResponse.SerializeToString,
            ),
            'FinishExecutor': grpc.unary_unary_rpc_method_handler(
                    servicer.FinishExecutor,
                    request_deserializer=services__pb2.EmptyResponse.FromString,
                    response_serializer=services__pb2.EmptyResponse.SerializeToString,
            ),
            'UpdatePartitionExecutor': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdatePartitionExecutor,
                    request_deserializer=services__pb2.EventUpdatePartitionStage.FromString,
                    response_serializer=services__pb2.EmptyResponse.SerializeToString,
            ),
            'Ping': grpc.unary_unary_rpc_method_handler(
                    servicer.Ping,
                    request_deserializer=services__pb2.EmptyResponse.FromString,
                    response_serializer=services__pb2.EmptyResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Executor', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('Executor', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Executor(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SavePartitionInCloud(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Executor/SavePartitionInCloud',
            services__pb2.SavePartitionInfo.SerializeToString,
            services__pb2.SaveCloudRequestDone.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReadPartitionFromCloud(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Executor/ReadPartitionFromCloud',
            services__pb2.PartitionSavedInformation.SerializeToString,
            services__pb2.EmptyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FinishExecutor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Executor/FinishExecutor',
            services__pb2.EmptyResponse.SerializeToString,
            services__pb2.EmptyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdatePartitionExecutor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Executor/UpdatePartitionExecutor',
            services__pb2.EventUpdatePartitionStage.SerializeToString,
            services__pb2.EmptyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Executor/Ping',
            services__pb2.EmptyResponse.SerializeToString,
            services__pb2.EmptyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
